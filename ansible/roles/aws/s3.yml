

# Create a bucket, add a policy from a file, enable requester pays, enable versioning and tag

- name: s3_buckets & policy & versioning
  s3_bucket:
    aws_access_key: "{{ access }}"
    aws_secret_key: "{{ secret }}"
    security_token: "{{ token }}"
    region: "{{project.region | default(null)}}"
    state: "{{ item.state }}"
    name:  "{{ item.name }}"
    policy: "{{ item.policy_file | default(null)}}"
    versioning: "{{ item.versioning | default(null)}}"
    purge_tags: "{{ item.purge_tags  | default('no')}}"
  with_items: "{{ project.buckets }}"
  register: s3_policy_version
  when: item.policy_file is defined or item.versioning is defined

# - name: s3_buckets & policy
#   s3_bucket:
#     aws_access_key: "{{ access }}"
#     aws_secret_key: "{{ secret }}"
#     security_token: "{{ token }}"
#     region: "{{project.region | default(null)}}"
#     name:  "{{ item.name }}"
#     state: "{{ item.state }}"
#     policy: "{{ item.policy_file }}"
#   when: item.changed == false and item.policy_file is defined
#   with_items: s3_policy_version.results

# - name: s3_buckets & versioning
#   s3_bucket:
#     aws_access_key: "{{ access }}"
#     aws_secret_key: "{{ secret }}"
#     security_token: "{{ token }}"
#     region: "{{project.region | default(null)}}"
#     name:  "{{ item.name }}"
#     state: "{{ item.state }}"
#     versioning: "{{ item.versioning }}"
#   when: item.changed == false and item.versioning is defined
#   with_items: s3_policy_version.results


- name: event[S3][lambda] adding Trigger w/ FILTER
  s3_bucket_notification:
    aws_access_key: "{{ access }}"
    aws_secret_key: "{{ secret }}"
    security_token: "{{ token }}"
    region: "{{project.region | default(null)}}"
    state: "{{ item.state }}"
    event_name: "{{ item.Id }}"
    bucket_name: "{{ item.bucket }}"
    lambda_function_arn: "{{ item.lambdaArn }}"
    events: "{{ item.events }}"
    prefix: "{{ item.Prefix  | default('')}}"
    suffix: "{{ item.Suffix  | default('')}}"
  with_items: "{{ project.buckets }}"
  when: item.lambdaArn is defined
  register: s3_filters


# - name: event[S3][SNS] adding Trigger

# - name: event[S3][SQS] adding Trigger

# - name: "{{ ';'.join(p.name for p in project.buckets) }}"
#   s3:
#     region: "{{project.region | default(null)}}"
#     bucket:  "{{ged_swagger_definition_bucket}}"
#     object:  "{{ged_api_swagger_filename}}"
#     src:  "files/{{ged_api_swagger_filename}}"
#     mode:  put
#   with_items: "{{ project.buckets }}"
#   when: (s3_policy_version is defined) and (item.svc is defined)


# - name: event[S3][lambda] adding Trigger w/ FILTER
#   cr_lambda_event:
#     aws_access_key: "{{ access }}"
#     aws_secret_key: "{{ secret }}"
#     security_token: "{{ token }}"
#     state: "{{ item.state }}"
#     region: "{{project.region | default(null)}}"
#     event_source: s3
#     function_name: "{{ item.lambdaArn }}"
#     source_params:
#       id: "{{ item.Id }}"
#       bucket: "{{ item.bucket }}"
#       prefix: "{{ item.filter.prefix }}"
#       suffix: "{{ item.filter.suffix }}"
#       events: "{{ item.events }}"
#   with_items: "{{ project.buckets }}"
#   when: item.filter is defined
#   register: s3_filters

# - name: event[S3][lambda] adding Trigger
#   cr_lambda_event:
#     aws_access_key: "{{ access }}"
#     aws_secret_key: "{{ secret }}"
#     security_token: "{{ token }}"
#     state: "{{ item.state }}"
#     region: "{{project.region | default(null)}}"
#     event_source: s3
#     function_name: "{{ item.lambdaArn }}"
#     #alias: "{{ item.alias }}"
#     source_params:
#       id: "{{ item.Id }}"
#       bucket: "{{ item.bucket }}"
#       # prefix: twitter
#       # suffix: log
#       events: "{{ item.events }}"
#   with_items: "{{ project.buckets }}"
#   when: (s3_filters.changed != True) and item.events is defined 







