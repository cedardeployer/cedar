

# Create a bucket, add a policy from a file, enable requester pays, enable versioning and tag

- name: s3_buckets & policy & versioning
  s3_bucket:
    aws_access_key: "{{ access }}"
    aws_secret_key: "{{ secret }}"
    security_token: "{{ token }}"
    region: "{{project.region | default(null)}}"
    state: "{{ item.state | default('present')}}"
    name:  "{{ item.name }}"
    policy: "{{ lookup('file', item.policy_document) }}"
    # versioning: "{{ item.versioning | default('no')}}"
    # purge_tags: "{{ item.purge_tags  | default('no')}}"
  with_items: "{{ project.buckets }}"
  register: s3_policy_version
  when: item.policy_document is defined or item.versioning is defined

- name: s3_CORS setup
  community.aws.aws_s3_cors:
    aws_access_key: "{{ access }}"
    aws_secret_key: "{{ secret }}"
    security_token: "{{ token }}"
    name: "{{ item.name }}"
    state: "{{ item.state }}"
    rules: "{{ item.cors }}"
  with_items: "{{ project.buckets }}"
  when: item.cors is defined


- name: s3 copy files from local
  s3_sync:
    aws_access_key: "{{ access }}"
    aws_secret_key: "{{ secret }}"
    security_token: "{{ token }}"
    bucket: "{{ item.name }}"
    file_root: "{{ item.bucket_dir | default(null)}}"
    # key_prefix: config_files/web
    file_change_strategy: force
    include: "*"
    exclude: "*__MACOSX,.*"
  with_items: "{{ project.buckets }}"
  when: item.bucket_dir is defined

# - s3_bucket:
#     name: mys3bucket
#     policy: "{{ lookup('file','policy.json') }}"
#     requester_pays: yes
#     versioning: yes
#     tags:
#       example: tag1
#       another: tag2

# - name: s3_buckets & policy
#   s3_bucket:
#     aws_access_key: "{{ access }}"
#     aws_secret_key: "{{ secret }}"
#     security_token: "{{ token }}"
#     region: "{{project.region | default(null)}}"
#     name:  "{{ item.name }}"
#     state: "{{ item.state }}"
#     policy: "{{ item.policy_file }}"
#   when: item.changed == false and item.policy_file is defined
#   with_items: s3_policy_version.results

# - name: s3_buckets & versioning
#   s3_bucket:
#     aws_access_key: "{{ access }}"
#     aws_secret_key: "{{ secret }}"
#     security_token: "{{ token }}"
#     region: "{{project.region | default(null)}}"
#     name:  "{{ item.name }}"
#     state: "{{ item.state }}"
#     versioning: "{{ item.versioning }}"
#   when: item.changed == false and item.versioning is defined
#   with_items: s3_policy_version.results

# - name: s3_copy FLIP TO ORIGIN--->
#   import_tasks: ../aws/sts.yml
#   vars:
#     project: '{{ s3.project }}'
#   when: project.origin is defined

# - name: s3_copy Add Policy
#   import_tasks: ../aws/IAM.yml
#   vars:
#     project: '{{ s3.project }}'
#   when: project.origin is defined



# - name: s3_copy FLIP BACK--->
#   import_tasks: ../aws/sts.yml
#   vars:
#     project: '{{ project }}'
#   when: project.origin is defined

# - name: s3_copy Files now with permissions
#   cd_s3_copy:
#     aws_access_key: "{{ access }}"
#     aws_secret_key: "{{ secret }}"
#     security_token: "{{ token }}"

#     state: "{{ item.state }}"
#     prefix: "{{ item.Prefix  | default('')}}"
#     suffix: "{{ item.Suffix  | default('')}}"
#   with_items: "{{ project.buckets }}"
#   when: project.origin is defined

# - name: s3_copy FLIP TO ORIGIN--->
#   import_tasks: ../aws/sts.yml
#   vars:
#     project: '{{ s3.project }}'
#   when: project.origin is defined

# - name: s3_copy REMOVE Policy
#   import_tasks: ../aws/IAM.yml
#   vars:
#     project: '{{ s3.project }}'
#   when: project.origin is defined

# - name: s3_copy FLIP BACK--->
#   import_tasks: ../aws/sts.yml
#   vars:
#     project: '{{ project }}'
#   when: project.origin is defined
- name: permit[s3][lambda]
  cd_lambda_permit:
    aws_access_key: "{{ access }}"
    aws_secret_key: "{{ secret }}"
    security_token: "{{ token }}"
    name: "{{ item.lambda_arn }}"                
    state: "{{ item.state }}"
    account: "{{ project.account_id }}"
    event_source:
      type: "s3"
      name: "{{ item.bucket }}"
  with_items: "{{ project.bucket_triggers }}"
  when: item.lambda_arn is defined

- name: event[S3][lambda] adding Trigger w/ FILTER
  s3_bucket_notification:
    aws_access_key: "{{ access }}"
    aws_secret_key: "{{ secret }}"
    security_token: "{{ token }}"
    region: "{{project.region | default(null)}}"
    state: "{{ item.state }}"
    event_name: "{{ item.id }}"
    bucket_name: "{{ item.bucket }}"
    lambda_function_arn: "{{ item.lambda_arn }}"
    events: "{{ item.events }}"
    prefix: "{{ item.prefix  | default('')}}"
    suffix: "{{ item.suffix  | default('')}}"
  with_items: "{{ project.bucket_triggers }}"
  when: item.lambda_arn is defined


# - name: event[S3][SNS] adding Trigger

# - name: event[S3][SQS] adding Trigger

# - name: "{{ ';'.join(p.name for p in project.buckets) }}"
#   s3:
#     region: "{{project.region | default(null)}}"
#     bucket:  "{{ged_swagger_definition_bucket}}"
#     object:  "{{ged_api_swagger_filename}}"
#     src:  "files/{{ged_api_swagger_filename}}"
#     mode:  put
#   with_items: "{{ project.buckets }}"
#   when: (s3_policy_version is defined) and (item.svc is defined)


# - name: event[S3][lambda] adding Trigger w/ FILTER
#   cr_lambda_event:
#     aws_access_key: "{{ access }}"
#     aws_secret_key: "{{ secret }}"
#     security_token: "{{ token }}"
#     state: "{{ item.state }}"
#     region: "{{project.region | default(null)}}"
#     event_source: s3
#     function_name: "{{ item.lambdaArn }}"
#     source_params:
#       id: "{{ item.Id }}"
#       bucket: "{{ item.bucket }}"
#       prefix: "{{ item.filter.prefix }}"
#       suffix: "{{ item.filter.suffix }}"
#       events: "{{ item.events }}"
#   with_items: "{{ project.buckets }}"
#   when: item.filter is defined
#   register: s3_filters

# - name: event[S3][lambda] adding Trigger
#   cr_lambda_event:
#     aws_access_key: "{{ access }}"
#     aws_secret_key: "{{ secret }}"
#     security_token: "{{ token }}"
#     state: "{{ item.state }}"
#     region: "{{project.region | default(null)}}"
#     event_source: s3
#     function_name: "{{ item.lambdaArn }}"
#     #alias: "{{ item.alias }}"
#     source_params:
#       id: "{{ item.Id }}"
#       bucket: "{{ item.bucket }}"
#       # prefix: twitter
#       # suffix: log
#       events: "{{ item.events }}"
#   with_items: "{{ project.buckets }}"
#   when: (s3_filters.changed != True) and item.events is defined 







